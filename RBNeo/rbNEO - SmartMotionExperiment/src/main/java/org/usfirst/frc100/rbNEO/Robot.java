// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.rbNEO;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.rbNEO.commands.*;
import org.usfirst.frc100.rbNEO.subsystems.*;
//Experiment 
import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.CANSparkMaxLowLevel;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
    //Experiment
    private static final int leftDeviceID = 1;
    private static final int rightDeviceID = 15;
    private CANSparkMax m_leftMotor;
    private CANSparkMax m_rightMotor;
    private CANPIDController m_leftPidController;
    private CANPIDController m_rightPidController;
    private CANEncoder m_leftEncoder;
    private CANEncoder m_rightEncoder;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM, maxVel, maxAcc, allowedErr, minVel;
    //End 

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new ForwardFourFeet());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);

        //Experiment
        m_leftMotor = new CANSparkMax(leftDeviceID, MotorType.kBrushless);
        m_leftMotor.setInverted(true);
        m_rightMotor = new CANSparkMax(rightDeviceID, MotorType.kBrushless);
        m_leftMotor.restoreFactoryDefaults();
        m_rightMotor.restoreFactoryDefaults();
        m_leftPidController = m_leftMotor.getPIDController();
        m_rightPidController = m_rightMotor.getPIDController();
        m_leftEncoder = m_leftMotor.getEncoder();
        m_rightEncoder = m_rightMotor.getEncoder();
        kP = 5e-5;
        kI = 0;
        kD = 0;
        kIz = 0;
        kFF = 0.000156;
        kMaxOutput = .25;
        kMinOutput = -.25;
        maxRPM = 5700;
        maxVel = 2000;
        maxAcc = 1500;
        minVel = 100;
        m_leftPidController.setP(kP);
        m_rightPidController.setP(kP);
        m_leftPidController.setI(kI);
        m_rightPidController.setI(kI);
        m_leftPidController.setD(kD);
        m_rightPidController.setD(kD);
        m_leftPidController.setIZone(kIz);
        m_rightPidController.setIZone(kIz);
        m_leftPidController.setFF(kFF);
        m_rightPidController.setFF(kFF);
        m_leftPidController.setOutputRange(kMinOutput, kMaxOutput);
        m_rightPidController.setOutputRange(kMinOutput, kMaxOutput);

        int smartMotionSlot = 0;
        m_leftPidController.setSmartMotionMaxVelocity(maxVel, smartMotionSlot);
        m_rightPidController.setSmartMotionMaxVelocity(maxVel, smartMotionSlot);
        m_leftPidController.setSmartMotionMinOutputVelocity(minVel, smartMotionSlot);
        m_rightPidController.setSmartMotionMinOutputVelocity(minVel, smartMotionSlot);
        m_leftPidController.setSmartMotionMaxAccel(maxAcc, smartMotionSlot);
        m_rightPidController.setSmartMotionMaxAccel(maxAcc, smartMotionSlot);
        m_leftPidController.setSmartMotionAllowedClosedLoopError(allowedErr, smartMotionSlot);
        m_rightPidController.setSmartMotionAllowedClosedLoopError(allowedErr, smartMotionSlot);
        SmartDashboard.putNumber("P Gain", kP);
        SmartDashboard.putNumber("I Gain", kI);
        SmartDashboard.putNumber("D Gain", kD);
        SmartDashboard.putNumber("I Zone", kIz);
        SmartDashboard.putNumber("Feed Forward", kFF);
        SmartDashboard.putNumber("Max Output", kMaxOutput);
        SmartDashboard.putNumber("Min Output", kMinOutput);
        SmartDashboard.putNumber("Max Velocity", maxVel);
        SmartDashboard.putNumber("Min Velocity", minVel);
        SmartDashboard.putNumber("Max Acceleration", maxAcc);
        SmartDashboard.putNumber("Allowed Closed Loop Error", allowedErr);
        SmartDashboard.putNumber("Set Position", 0);
        SmartDashboard.putNumber("Set Velocity", 0);
        SmartDashboard.putBoolean("Mode", true);


    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        double p = SmartDashboard.getNumber("P Gain", 0);
        double i = SmartDashboard.getNumber("I Gain", 0);
        double d = SmartDashboard.getNumber("D Gain", 0);
        double iz = SmartDashboard.getNumber("I Zone", 0);
        double ff = SmartDashboard.getNumber("Feed Forward", 0);
        double max = SmartDashboard.getNumber("Max Output", 0);
        double min = SmartDashboard.getNumber("Min Output", 0);
        double maxV = SmartDashboard.getNumber("Max Velocity", 0);
        double minV = SmartDashboard.getNumber("Min Velocty", 0);
        double maxA = SmartDashboard.getNumber("Max Acceleration", 0);
        double allE = SmartDashboard.getNumber("Allowed Closed Loop Error", 0);

        if((p != kP)) {m_leftPidController.setP(p); kP = p; }
        if((p != kP)) {m_rightPidController.setP(p); kP = p; }
        if((i != kI)) {m_leftPidController.setI(i); kI = i; }
        if((i != kI)) {m_rightPidController.setI(i); kI = i; }
        if((d != kD)) {m_leftPidController.setD(d); kD = d; }
        if((d != kD)) {m_rightPidController.setD(d); kD = d; }
        if((iz != kIz)) {m_leftPidController.setIZone(iz); kIz = iz; }
        if((iz != kIz)) {m_rightPidController.setIZone(iz); kIz = iz; }
        if((ff != kFF)) {m_leftPidController.setFF(ff); kFF = ff; }
        if((ff != kFF)) {m_rightPidController.setFF(ff); kFF = ff; }
        if((max !=kMaxOutput) || (min != kMinOutput)) {
            m_leftPidController.setOutputRange(min, max);
            m_rightPidController.setOutputRange(min, max);
            kMinOutput = min; kMaxOutput = max;
        }
        if((maxV != maxVel)) {m_leftPidController.setSmartMotionMaxVelocity(maxV,0); maxVel = maxV; }
        if((maxV != maxVel)) {m_rightPidController.setSmartMotionMaxVelocity(maxV,0); maxVel = maxV; }
        if((minV != minVel)) {m_leftPidController.setSmartMotionMinOutputVelocity(minV,0); minVel = minV; }
        if((minV != minVel)) {m_rightPidController.setSmartMotionMinOutputVelocity(minV,0); minVel = minV; }
        if((maxA != maxAcc)) {m_leftPidController.setSmartMotionMaxAccel(maxA,0); maxAcc = maxA; }
        if((maxA != maxAcc)) {m_rightPidController.setSmartMotionMaxAccel(maxA,0); maxAcc = maxA; }
        if((allE != allowedErr)) {m_leftPidController.setSmartMotionAllowedClosedLoopError(allE,0); allowedErr = allE; }
        if((allE != allowedErr)) {m_rightPidController.setSmartMotionAllowedClosedLoopError(allE,0); allowedErr = allE; }


        double setPoint, leftProcessVariable, rightProcessVariable;
        boolean mode = SmartDashboard.getBoolean("Mode", false);
        if(mode) {
            setPoint = SmartDashboard.getNumber("Set Velocity", 0);
            m_leftPidController.setReference(-setPoint, ControlType.kVelocity);
            m_rightPidController.setReference(setPoint, ControlType.kVelocity);
            leftProcessVariable = m_leftEncoder.getVelocity();
            rightProcessVariable = m_rightEncoder.getVelocity();
        }   else {
            setPoint = SmartDashboard.getNumber("Set Position", 0);
           // m_leftPidController.setReference(setPoint, ControlType.kSmartMotion);
           m_leftMotor.stopMotor();
            m_rightPidController.setReference(100, ControlType.kSmartMotion);
            leftProcessVariable = m_leftEncoder.getPosition();
            rightProcessVariable = m_rightEncoder.getPosition();
        } 
        SmartDashboard.putNumber("Set Point", setPoint);
        SmartDashboard.putNumber("Left Process Variable", leftProcessVariable);
        SmartDashboard.putNumber("Right Process Variable", rightProcessVariable);
        SmartDashboard.putNumber("Left Output", m_leftMotor.getAppliedOutput());
        SmartDashboard.putNumber("Right Output", m_rightMotor.getAppliedOutput());

     

    }
}
