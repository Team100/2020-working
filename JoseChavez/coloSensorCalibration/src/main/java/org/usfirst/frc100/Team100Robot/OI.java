// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc100.Team100Robot;

import org.usfirst.frc100.Team100Robot.commands.*;
import org.usfirst.frc100.Team100Robot.commands.Drivetrain.Drive;
import org.usfirst.frc100.Team100Robot.commands.Drivetrain.Shift.ShiftToHigh;
import org.usfirst.frc100.Team100Robot.commands.Drivetrain.Shift.ShiftToLow;
import org.usfirst.frc100.Team100Robot.subsystems.Cameratiltsubsystem;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.InstantCommand;

import org.usfirst.frc100.Team100Robot.Robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.Command;
//import frc.robot.subsystems.Cameratiltsubsystem;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    private Joystick gamepad;

    private JoystickButton shiftLow;
    private JoystickButton shiftHigh;
    private JoystickButton riseSpinner;
    private JoystickButton lowerSpinner;
    private JoystickButton calibrate;
    private JoystickButton threeTimes;
    private JoystickButton goToColor;

    private final Cameratiltsubsystem m_exampleSubsystem = new Cameratiltsubsystem();

  //private final ExampleCommand m_autoCommand = new ExampleCommand(m_exampleSubsystem);
  private final Joystick joystick = new Joystick(1);
  private final JoystickButton top = new JoystickButton(joystick, 4);
  private final JoystickButton middle = new JoystickButton(joystick, 1);
  private final JoystickButton up = new JoystickButton(joystick, 6);
  private final JoystickButton down = new JoystickButton(joystick, 5);

    // ButtonBoard

    public JoystickButton autoSwitch;

    public OI() {

        /*
         * INIT Joysticks
         */
        gamepad = new Joystick(0);

        /*
         * Joystick 0 (Left Stick)
         */

        shiftLow = new JoystickButton(gamepad, 3);
        shiftLow.whenPressed(new ShiftToLow());

        shiftHigh = new JoystickButton(gamepad, 4);
        shiftHigh.whenPressed(new ShiftToHigh());

        riseSpinner = new JoystickButton(gamepad, 1);
        riseSpinner.whileHeld(new riseSpinerWheel());

        lowerSpinner = new JoystickButton(gamepad, 2);
        lowerSpinner.whileHeld(new lowerSpinerWheel());

        calibrate = new JoystickButton(gamepad, 10);
        calibrate.whenPressed(new InstantCommand(() -> Robot.controlPanelSpinner.calibrate()));

        threeTimes = new JoystickButton(gamepad, 5);
        threeTimes.whenPressed(new threeTimes());
        
        goToColor = new JoystickButton(gamepad, 7);
        goToColor.whenPressed(new GoToSpecificColor());
        
        // //SmartDashboard Buttons
        // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        // SmartDashboard.putData("DriveCMD", new Drive());
        // SmartDashboard.putData("HighGear", new HighGear());
        // SmartDashboard.putData("LowGear", new LowGear());

        configureButtonBindings();
    }

    private void configureButtonBindings() {


        top.whenPressed(new InstantCommand(() -> {
          m_exampleSubsystem.setsetpoint(Constants.Camera.SETPOINT_TOP);
        }));
        middle.whenPressed(new InstantCommand(() -> {
          m_exampleSubsystem.setsetpoint(Constants.Camera.SETPOINT_MIDDLE);
        }));
        up.whenPressed(new InstantCommand(() -> {
          m_exampleSubsystem.setsetpoint(m_exampleSubsystem.getsetsetpoint() + Constants.Camera.INCREMENT);
        }));
        down.whenPressed(new InstantCommand(() -> {
          m_exampleSubsystem.setsetpoint(m_exampleSubsystem.getsetsetpoint() - Constants.Camera.INCREMENT);
        }));
      }

    public Joystick getGamepad() {
        return gamepad;
    }

    // public Joystick getGamepad() {
    // return gamepad;
    // }
   // public Command getAutonomousCommand() {
        // An ExampleCommand will run in autonomous
       // return null;
   //   }

}
