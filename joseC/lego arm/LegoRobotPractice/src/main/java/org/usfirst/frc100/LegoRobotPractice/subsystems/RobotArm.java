// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.LegoRobotPractice.subsystems;


import org.usfirst.frc100.LegoRobotPractice.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Encoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class RobotArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AnalogPotentiometer armPositionPot;
    private Servo armContinuousRotationServo;
    private DigitalInput armUpperLimit;
    private DigitalInput armLowerLimit;
    private Encoder encodervalue;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public RobotArm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armPositionPot = new AnalogPotentiometer(0, 1.0, 0.0);
        addChild("Arm Position Pot",armPositionPot);
        
        
        armContinuousRotationServo = new Servo(0);
        addChild("ArmContinuousRotationServo",armContinuousRotationServo);
        
        
        armUpperLimit = new DigitalInput(1);
        addChild("Arm Upper Limit",armUpperLimit);
        
        
        armLowerLimit = new DigitalInput(0);
        addChild("Arm Lower Limit",armLowerLimit);

        encodervalue = new Encoder(2, 3);
        addChild("Encoder",encodervalue);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new HoldIt());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void rasie() {
        if (isAtHighLimit()) {
            stop();
        } else {
            armContinuousRotationServo.set(0.0);
         }
        }
    
    public void lower() {
        if (isAtLowerLimit()) {
            stop();
        }
        else {
            armContinuousRotationServo.set(1.0);
        }
    }
    
    public void stop() {
        armContinuousRotationServo.set(0.5);
    }
    
    public boolean isAtHighLimit() {
        return armUpperLimit.get();
    }
    
    public boolean isAtLowerLimit() {
        return armLowerLimit.get();
    }
    public double getPotValue()  {
        return armPositionPot.get();
    }
    public int getEncodervalue() {
        return encodervalue.get();
    }


    @Override
    public void periodic() {
        // Put code here to be run every loop
    }
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.



